<launch>
    <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf" />
    <!-- Gazebo world to load -->
    <arg name="world" default="$(find vrx_gazebo)/worlds/empty_sea.world" />
    <!-- If true, run gazebo GUI -->
    <arg name="gui" default="true" />
    <!-- If true, run gazebo in verbose mode -->
    <arg name="verbose" default="true" />
    <!-- Set various other gazebo arguments-->
    <arg name="extra_gazebo_args" default="" />
    <!-- Start in a default namespace -->
    <arg name="namespace" default="wamv" />
    <!-- Do we lock the vessel to the world? -->
    <arg name="wamv_locked" default="false" />
    <!-- Start paused? -->
    <arg name="paused" default="false" />
    <!-- Acoustic pinger position(s) -->
    <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml" />

    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="$(arg world)" /> -->
        <arg name="verbose" value="$(arg verbose)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="true" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)" />
    </include>

    <include file="$(find sjtu_drone)/launch/spawn_multi_drone.launch">
        <arg name="num" value="2" />
    </include>

    <include file="$(find pozyx_simulation)/launch/uwb_wamv_uav_simulation.launch">
        <arg name="namespace" value="pozyx_simulation/drone0" />
        <arg name="drone_ns" value="drone0" />
        <arg name="enable_multilateration" value="false" />
        <arg name="enable_path" value="false" />
        <arg name="pub_marker" value="false" />
    </include>

    <include file="$(find pozyx_simulation)/launch/uwb_wamv_uav_simulation.launch">
        <arg name="namespace" value="pozyx_simulation/drone1" />
        <arg name="drone_ns" value="drone1" />
        <arg name="enable_multilateration" value="false" />
        <arg name="enable_path" value="false" />
        <arg name="pub_marker" value="false" />
    </include>

    <!-- <include file="$(find pozyx_simulation)/launch/uwb_wamv_uav_simulation.launch">
        <arg name="namespace" value="pozyx_simulation/drone2" />
        <arg name="drone_ns" value="drone2" />
        <arg name="enable_multilateration" value="false" />
        <arg name="enable_path" value="false" />
        <arg name="pub_marker" value="false" />
    </include>

    <include file="$(find pozyx_simulation)/launch/uwb_wamv_uav_simulation.launch">
        <arg name="namespace" value="pozyx_simulation/drone3" />
        <arg name="drone_ns" value="drone3" />
        <arg name="enable_multilateration" value="false" />
        <arg name="enable_path" value="false" />
        <arg name="pub_marker" value="false" />
    </include> -->

    <!-- <include file="$(find vrx_gazebo)/launch/pointcloud_to_laserscan.launch"/> -->
    <arg name="enable_wamv" default="false" />
    <group if="$(arg enable_wamv)">
        <arg name="wamv_ns" default="wamv" />

        <arg name="wamv_x" default="0" />
        <arg name="wamv_y" default="0" />
        <arg name="wamv_z" default="0" />
        <arg name="wamv_R" default="0" />
        <arg name="wamv_P" default="0" />
        <arg name="wamv_Y" default="0" />

        <arg name="thrust_config" default="T" />

        <!-- Do we load the VRX sensor suite? -->
        <arg name="vrx_sensors_enabled" default="true" />

        <!-- For now - can only use the T configuration! -->
        <arg name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro" />

        <arg name="wamv_plate" default="true" />

        <param name="$(arg wamv_ns)/robot_description"
            command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=$(arg wamv_ns) plate:=$(arg wamv_plate)" />

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv_tf_pub">
            <remap from="robot_description" to="wamv/robot_description" />
            <remap from="joint_states" to="wamv/joint_states" />
        </node>

        <node name="spawn_model_wamv" pkg="gazebo_ros" type="spawn_model"
            args="-x $(arg wamv_x) -y $(arg wamv_y) -z $(arg wamv_z)
        -R $(arg wamv_R) -P $(arg wamv_P) -Y $(arg wamv_Y)
        -urdf -param $(arg wamv_ns)/robot_description -model wamv" />

        <group ns="$(arg wamv_ns)">
            <node pkg="vrx_gazebo" type="model_state_to_tf" name="model_state_to_tf">
                <param name="model_name" value="$(arg wamv_ns)" />
                <param name="model_tf_suffix" value="base_link" />
                <param name="broadcast_rate" value="10" />
            </node>
            <node pkg="vrx_gazebo" type="model_state_to_pose_stamped"
                name="model_state_to_pose_stamped" output="log">
                <param name="model_name" value="$(arg wamv_ns)" />
                <param name="publish_rate" value="10" />
            </node>
        </group>

    </group>

    <group unless="$(arg enable_wamv)">
        <node name="map_to_dummy_wamv_base" pkg="tf2_ros" type="static_transform_publisher"
            args="0.35 0 -1.3 0 0 0 map wamv/base_link" />
    </group>
</launch>
