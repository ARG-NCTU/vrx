<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/motor_anchoring.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="wamv"/>
  <!-- Do we lock the vessel to the world? -->
  <arg name="wamv_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false"/>
  <!-- Acoustic pinger position(s) -->
  <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml"/>

  <!-- Initial USV location and attitude-->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="1" />

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))"/>
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))"/>
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))"/>
  <arg name="x_square_config" value="$(eval int((thrust_config)=='X_square'))"/>

  <!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>
  <arg if="$(arg x_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>
  <arg if="$(arg x_square_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>

  <arg  name="smallboat_urdf" default="$(find wamv_gazebo)/urdf/sb_gazebo.urdf.xacro"/>

  <!-- Spawn wamv2 in Gazebo -->
  <param name="wamv2/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=wamv2 "/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv_tf_pub" >
     <remap from="robot_description" to="wamv2/robot_description" />
     <remap from="joint_states" to="wamv2/joint_states" />
  </node>
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param wamv2/robot_description -model wamv2"/>
              
  <!-- Spawn wamv3 in Gazebo -->      
  <param name="wamv3/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=wamv3" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv3_tf_pub" >
     <remap from="robot_description" to="wamv3/robot_description" />
     <remap from="joint_states" to="wamv3/joint_states" />
  </node>
  <node name="spawn_model_2" pkg="gazebo_ros" type="spawn_model"
        args="-x 20 -y 20 -z 0.2
              -R 0 -P 0 -Y 0
              -urdf -param wamv3/robot_description -model wamv3"/> 
  
  <!-- Set the pinger location -->
  <!-- <node name="set_pinger_position" pkg="vrx_gazebo" type="set_pinger_position.py" output="screen">
    <rosparam command="load" file="$(arg pinger_params)" />
  </node>
  <node name="pinger_visualization" pkg="vrx_gazebo" type="pinger_visualization.py" /> -->

  <!-- mark a circle in rviz -->
  <arg name="radius" default="4.0" />
  <node pkg="vrx_gazebo" type="rviz_marker_circle.py" name="rviz_marker_circle" output="screen">
    <param name="radius" value="$(arg radius)" />
  </node>

  <param name="$(arg namespace)/smallboat_description"  
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg smallboat_urdf)'
         locked:=$(arg wamv_locked)		   
         namespace:=sb "/>
  <node name="spawn_model_3" pkg="gazebo_ros" type="spawn_model"
        args="-x 8 -y 8 -z 5
              -R 0 -P 0 -Y 0
              -urdf -param $(arg namespace)/smallboat_description  -model smallboat"/>  


  <!-- Launch pub_tf_posestamped for wamv2 -->
    <include file="$(find localization)/launch/pub_tf_posestamped.launch">
        <arg name="model_name" value="wamv2"/>
        <arg name="pub_tf" value="false"/>
    </include>

    <!-- Launch pub_tf_posestamped for wamv3 -->
    <include file="$(find localization)/launch/pub_tf_posestamped.launch">
        <arg name="model_name" value="wamv3"/>
        <arg name="pub_tf" value="false"/>
    </include>

    <!-- Launch lidar_crop for wamv2 -->

    <include file="$(find lidar_crop)/launch/lidar_crop.launch">
        <arg name="veh" value="wamv2"/>
    </include>

    <!-- Launch usv_joydrive for wamv2 -->
    <include file="$(find vrx_gazebo)/launch/usv_joydrive_estop.launch">
        <arg name="veh" value="wamv2"/>
        <arg name="use_namespace" value="true"/>
        <arg name="use_joy" value="false"/>
    </include>

    <!-- Launch usv_joydrive for wamv3 -->
    <include file="$(find vrx_gazebo)/launch/usv_joydrive_estop.launch">
        <arg name="veh" value="wamv3"/>
        <arg name="use_namespace" value="true"/>
        <arg name="use_joy" value="false"/>
    </include>
</launch>
