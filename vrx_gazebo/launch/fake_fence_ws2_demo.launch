<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/sydneyregatta_bigger_ocean.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="true"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="wamv"/>
  <!-- Do we lock the vessel to the world? -->
  <arg name="wamv_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false"/>
  <!-- Acoustic pinger position(s) -->
  <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml"/>

  <!-- Initial USV location and attitude-->
  <!-- sim -->
  <arg name="x" default="1480" />
  <arg name="y" default="-30" />

  <arg name="x_3" default="1440" />
  <arg name="y_3" default="-30" />

  <arg name="x_4" default="1520" />
  <arg name="y_4" default="-30" />

  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="1.62" />

  <arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))"/>
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))"/>
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))"/>

  <!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>


  <!-- wamv 2-->
  <param name="wamv2/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=wamv2 red_ball:=true" />

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv2_tf_pub">
    <remap from="robot_description" to="wamv2/robot_description" />
    <remap from="joint_states" to="wamv2/joint_states" />
  </node>

  <node name="spawn_model_2" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param wamv2/robot_description -model wamv2"/>

  <!-- wamv 3-->
  <param name="wamv3/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=wamv3"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv3_tf_pub">
    <remap from="robot_description" to="wamv3/robot_description" />
    <remap from="joint_states" to="wamv3/joint_states" />
  </node>

  <node name="spawn_model_3" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x_3) -y $(arg y_3) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param wamv3/robot_description -model wamv3"/>


  <!-- wamv 4-->
  <param name="wamv4/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=wamv4 "/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv4_tf_pub">
    <remap from="robot_description" to="wamv4/robot_description" />
    <remap from="joint_states" to="wamv4/joint_states" />
  </node>

  <node name="spawn_model_4" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x_4) -y $(arg y_4) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param wamv4/robot_description -model wamv4"/>
  
  <arg name="drone_ns" default="drone"/>
  <include file="$(find vrx_gazebo)/launch/if750a_camera_pushing.launch">
    <arg name="gcs_url" value="udp://@192.168.0.33" />
    <arg name="drone_ns" value="$(arg drone_ns)"/>
    <arg name="x" value="1480.0"/>
    <arg name="y" value="-50.0"/>
    <arg name="R" value="0.0"/>
    <arg name="P" value="0.0"/>
    <arg name="Y" value="0"/>
  </include>

  <!-- Spawn drone model in Gazebo -->
  <!-- <arg name="drone_ns" default="/"/>
  <arg name="model" default="iris"/>
  <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
  <arg name="gcs_url" default="" /> -->
  <!-- GCS link is provided by SITL -->
  <!-- <arg name="tgt_system" default="1" />
  <arg name="tgt_component" default="1" />
  <arg name="vehicle" default="iris"/>
  <param name="use_sim_time" value="true" />
  <arg name="respawn_mavros" default="false" />

  <include file="$(find px4)/launch/px4.launch">
    <arg name="vehicle" value="$(arg vehicle)"/>
  </include> -->

  <!-- Launch MavROS -->
  <!-- <group ns="$(arg drone_ns)">
    <include file="$(find mavros)/launch/node.launch">
      <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
      <arg name="config_yaml" value="$(find vrx_gazebo)/config/drone_config/px4_config.yaml" />
      <arg name="fcu_url" value="$(arg fcu_url)" />
      <arg name="gcs_url" value="$(arg gcs_url)" />
      <arg name="tgt_system" value="$(arg tgt_system)" />
      <arg name="tgt_component" value="$(arg tgt_component)" />
      <arg name="respawn_mavros" default="$(arg respawn_mavros)" />
    </include>
  </group> -->

  <!-- <arg name="drone_x" default="-20" />
  <arg name="drone_y" default="0" />
  <arg name="drone_z" default="0.5" />
  <arg name="drone_R" default="0" />
  <arg name="drone_P" default="0" />
  <arg name="drone_Y" default="0" />

  <node name="spawn_model_drone" pkg="gazebo_ros" type="spawn_model" args="-x $(arg drone_x) -y $(arg drone_y) -z $(arg drone_z)
              -R $(arg drone_R) -P $(arg drone_P) -Y $(arg drone_Y)
              -sdf -database $(arg model) -model drone"/> -->
</launch>
