<launch>
    <arg name="world" default="$(find vrx_gazebo)/worlds/example_course.world" />

    <!-- If true, run gazebo GUI -->
    <arg name="gui" default="true" />

    <!-- If true, run gazebo in verbose mode -->
    <arg name="verbose" default="false"/>

    <!-- Set various other gazebo arguments-->
    <arg name="extra_gazebo_args" default=""/>

    <!-- drone namespace -->
    <arg name="drone_ns" default="/"/>

    <!-- wamv namespace -->
    <arg name="wamv_ns" default="wamv"/>

    <!-- Do we lock the vessel to the world? -->
    <arg name="wamv_locked" default="false" />

    <arg name="paused" default="false"/>
    <!-- Acoustic pinger position(s) -->
    <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml"/>

    <!-- drone & mavros config -->
    <arg name="model" default="if750a_camera_pushing"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="gcs_url" default="" />
    <!-- GCS link is provided by SITL -->
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />
    <arg name="vehicle" default="if750a"/>
    <arg name="respawn_mavros" default="false" />

    <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera" args="0 0 0 -1.57 0 -1.57 fcu camera_link 10"/> -->

    <!-- Launch PX4 SITL -->
    <include file="$(find px4)/launch/px4.launch">
        <arg name="vehicle" value="$(arg vehicle)"/>
    </include>

    <!-- Launch MavROS -->
    <group ns="$(arg drone_ns)">
        <include file="$(find mavros)/launch/node.launch">
            <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
            <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
            <arg name="config_yaml" value="$(find vrx_gazebo)/config/drone_config/px4_config2.yaml" />
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
            <arg name="respawn_mavros" default="$(arg respawn_mavros)" />
        </include>
    </group>

    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
    </include>

    <!-- drone initail position -->
    <arg name="drone_x" default="-748" />
    <arg name="drone_y" default="250" />
    <arg name="drone_z" default="3.7" />
    <arg name="drone_R" default="0" />
    <arg name="drone_P" default="0" />
    <arg name="drone_Y" default="0.7" />

    <!-- Spawn drone model in Gazebo -->
    <node name="spawn_model_drone" pkg="gazebo_ros" type="spawn_model" args="-x $(arg drone_x) -y $(arg drone_y) -z $(arg drone_z)
              -R $(arg drone_R) -P $(arg drone_P) -Y $(arg drone_Y)
              -sdf -database $(arg model) -model drone"/>

    <!-- wamv initail position -->
    <arg name="wamv_x" default="-750" />
    <arg name="wamv_y" default="350" />
    <arg name="wamv_z" default="0" />
    <arg name="wamv_R" default="0" />
    <arg name="wamv_P" default="0" />
    <arg name="wamv_Y" default="0" />

    <!-- Allow user specified thruster configurations
        H = stern trusters on each hull
        T = H with a lateral thruster
        X = "holonomic" configuration -->
    <arg name="thrust_config" default="T" />

    <!-- Do we load the VRX sensor suite? -->
    <arg name="vrx_sensors_enabled" default="true" />

    <!-- For now - can only use the T configuration! -->
    <arg name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>

    <arg name="wamv_plate" default="true"/>

    <param name="$(arg wamv_ns)/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=$(arg wamv_ns) plate:=$(arg wamv_plate)
            "/>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv_tf_pub">
        <remap from="robot_description" to="wamv/robot_description" />
        <remap from="joint_states" to="wamv/joint_states" />
    </node>

    <!-- Spawn wamv model in Gazebo -->
    <node name="spawn_model_wamv" pkg="gazebo_ros" type="spawn_model" args="-x $(arg wamv_x) -y $(arg wamv_y) -z $(arg wamv_z)
                -R $(arg wamv_R) -P $(arg wamv_P) -Y $(arg wamv_Y)
                -urdf -param $(arg wamv_ns)/robot_description -model wamv"/>

    <!-- Set the pinger location -->
    <!-- <node name="set_pinger_position" pkg="vrx_gazebo" type="set_pinger_position.py" output="screen">
        <rosparam command="load" file="$(arg pinger_params)" />
    </node>
    <node name="pinger_visualization" pkg="vrx_gazebo" type="pinger_visualization.py" /> -->

</launch>
