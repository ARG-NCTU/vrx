<launch>
    <arg name="world" default="$(find vrx_gazebo)/worlds/example_course_no_object.world" />

    <!-- If true, run gazebo GUI -->
    <arg name="gui" default="true" />

    <!-- If true, run gazebo in verbose mode -->
    <arg name="verbose" default="false"/>

    <!-- Set various other gazebo arguments-->
    <arg name="extra_gazebo_args" default=""/>

    <!-- drone namespace -->
    <arg name="drone_ns" default="drone"/>

    <!-- wamv namespace -->
    <arg name="wamv_ns" default="wamv"/>

    <!-- Do we lock the vessel to the world? -->
    <arg name="wamv_locked" default="true" />

    <arg name="paused" default="false"/>
    <!-- Acoustic pinger position(s) -->
    <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml"/>


    <!-- Define a static transform from a camera internal frame to the fcu for every camera used -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera" args="0 0 0 -1.57 0 -1.57 fcu camera_link 10"/> -->

    <!-- Launch Gazebo -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
    </include>

    <!-- wamv initail position -->
    <arg name="x" default="-578.6" />
    <arg name="y" default="278.4" />
    <arg name="z" default="0" />
    <arg name="R" default="0" />
    <arg name="P" default="0" />
    <arg name="Y" default="0" />

    <!-- Allow user specified thruster configurations
        H = stern trusters on each hull
        T = H with a lateral thruster
        X = "holonomic" configuration -->
    <arg name="thrust_config" default="T" />

    <!-- Do we load the VRX sensor suite? -->
    <arg name="vrx_sensors_enabled" default="false" />

    <!-- For now - can only use the T configuration! -->
    <arg name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>

    <arg name="wamv_plate" default="true"/>
    <arg name="red_ball" default="false"/>

    <param name="$(arg wamv_ns)/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)' locked:=$(arg wamv_locked) thruster_config:=$(arg thrust_config) vrx_sensors_enabled:=$(arg vrx_sensors_enabled) namespace:=$(arg wamv_ns) plate:=$(arg wamv_plate) red_ball:=$(arg red_ball)"/>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="wamv_tf_pub">
        <remap from="robot_description" to="wamv/robot_description" />
        <remap from="joint_states" to="wamv/joint_states" />
    </node>

    <!-- Spawn wamv model in Gazebo -->
    <node name="spawn_model_wamv" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x) -y $(arg y) -z $(arg z)
        -R $(arg R) -P $(arg P) -Y $(arg Y)
        -urdf -param $(arg wamv_ns)/robot_description -model wamv"/>

    <group ns="$(arg wamv_ns)">
        <node pkg="vrx_gazebo" type="model_state_to_tf.py" name="model_state_to_tf">
            <param name="model_name" value="$(arg wamv_ns)"/>
            <param name="model_tf_suffix" value="base_link"/>
            <param name="broadcast_rate" value="50"/>
        </node>
        <node pkg="vrx_gazebo" type="model_state_to_pose_stamped.py" name="model_state_to_pose_stamped" output="log">
            <param name="model_name" value="$(arg wamv_ns)"/>
            <param name="publish_rate" value="50"/>
        </node>
    </group>

    <include file="$(find vrx_gazebo)/launch/if750a_wx200.launch">
        <arg name="drone_ns" value="$(arg drone_ns)"/>
    </include>

    <!-- spawn desk and target object -->
    <node name="spawn_model_desk" pkg="gazebo_ros" type="spawn_model"
    args="-x -594.4  -y 259.8 -z 0.5
            -R 0 -P 0 -Y -1.025
            -sdf -database foldable_table  -model table"/>


    <node name="spawn_model_pole" pkg="gazebo_ros" type="spawn_model"
    args="-x -594.11 -y 259.9 -z 1.21
            -R 0 -P 0 -Y -1.025
            -sdf -database red_pole  -model red_pole"/>

    <!-- <node name="spawn_model_basket" pkg="gazebo_ros" type="spawn_model"
    args="-x -594.11 -y 259.7 -z 1.21
            -R 0 -P 0 -Y -1.025
            -sdf -database basket -model basket"/> -->

    <node pkg="vrx_gazebo" type="model_state_to_pose_stamped.py" name="model_state_to_pose_stamped" output="log">
        <param name="model_name" value="red_pole"/>
        <param name="publish_rate" value="50"/>
    </node>
    

    <!-- <node name="spawn_model_flag" pkg="gazebo_ros" type="spawn_model"
    args="-x -588 -y 265 -z 1
            -R 0 -P 0 -Y 0
            -sdf -database flag  -model bar"/> -->
</launch>
    